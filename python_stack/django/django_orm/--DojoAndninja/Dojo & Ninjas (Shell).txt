//

-- Create 3 new dojos

>>> dojo.objects.create(name = "coding dojo Seattle" ,city = "Seattle" , state="Washington")
<dojo: dojo object (1)>
>>> dojo.objects.create(name = "coding dojo Chicago" ,city = "Chicago" , state="Illinois")
<dojo: dojo object (2)>
>>> dojo.objects.create(name = "coding dojo Los Angeles" ,city = "Los Angeles" , state="California")
<dojo: dojo object (3)>

//


--- Delete the 3 dojos you just created

>>> dojo.objects.all().delete()
(3, {'newapp.ninja': 0, 'newapp.dojo': 3})
>>> dojo.objects.all()
<QuerySet []>


//

---- Create 3 more dojos

>>> dojo.objects.create(name = "coding dojo Seattle" ,city = "Seattle" , state="Washington")
<dojo: dojo object (4)>
>>> dojo.objects.create(name = "coding dojo Chicago" ,city = "Chicago" , state="Illinois")
<dojo: dojo object (5)>
>>> dojo.objects.create(name = "coding dojo Los Angeles" ,city = "Los Angeles" , state="California")
<dojo: dojo object (6)>

//

------Create 3 ninjas that belong to the first dojo

>>> this_dojo=dojo.objects.get(id = 4)
>>> ninja.objects.create(first_name ='gharam' ,last_name ='almutairi' , name=this_dojo)
<ninja: ninja object (1)>
>>> ninja.objects.create(first_name ='sara' ,last_name ='alotaibi' , name=this_dojo)
<ninja: ninja object (2)>
>>> ninja.objects.create(first_name ='yara' ,last_name ='aljarbou' , name=this_dojo)
<ninja: ninja object (3)>

------Create 3 ninjas that belong to the second dojo
>> dojo2=dojo.objects.get(id = 5)
>>> ninja.objects.create(first_name ='jane' ,last_name ='doe' , name=dojo2)
<ninja: ninja object (4)>
>>> ninja.objects.create(first_name ='john' ,last_name ='doe' , name=dojo2)
<ninja: ninja object (5)>
>>> ninja.objects.create(first_name ='abeer' ,last_name ='saad' , name=dojo2)
<ninja: ninja object (6)>



------Create 3 ninjas that belong to the third dojo
>>> dojo3=dojo.objects.get(id = 6)
>>> ninja.objects.create(first_name ='huda' ,last_name ='khald' , name=dojo3)
<ninja: ninja object (7)>
>>> ninja.objects.create(first_name ='reem' ,last_name ='ahmed' , name=dojo3)
<ninja: ninja object (8)>
>>> ninja.objects.create(first_name ='afnan' ,last_name ='nasser' , name=dojo3)
<ninja: ninja object (9)>

//

--------Retrieve all the ninjas from the first dojo
>> this_dojo = dojo.objects.get(id = 4)
>>> this_dojo.ninjas.all()
<QuerySet [<ninja: <Ninja object: First Name: gharam  Last Name: almutairi Dojo: <User object: Name: coding dojo Seattle City: Seattle State: Washington (4)>
 (1)>
>, <ninja: <Ninja object: First Name: sara  Last Name: alotaibi Dojo: <User object: Name: coding dojo Seattle City: Seattle State: Washington (4)>
 (2)>
>, <ninja: <Ninja object: First Name: yara  Last Name: aljarbou Dojo: <User object: Name: coding dojo Seattle City: Seattle State: Washington (4)>
 (3)>
>]>

----------Retrieve all the ninjas from the last dojo

>>> this_dojo = dojo.objects.get(id = 6)
>>> this_dojo.ninjas.all()
<QuerySet [<ninja: <Ninja object: First Name: huda  Last Name: khald Dojo: <User object: Name: coding dojo Los Angeles City: Los Angeles State: California (6)>
 (7)>
>, <ninja: <Ninja object: First Name: reem  Last Name: ahmed Dojo: <User object: Name: coding dojo Los Angeles City: Los Angeles State: California (6)>
 (8)>
>, <ninja: <Ninja object: First Name: afnan  Last Name: nasser Dojo: <User object: Name: coding dojo Los Angeles City: Los Angeles State: California (6)>

//

-------Retrieve the last ninja's dojo

>>> ninja.objects.last().dojo_id
<dojo: <dojo object: Name: coding dojo Los Angeles City: Los Angeles State: California (6)>

//

----Add a new text field called "desc" to your Dojo class
----Create and run the migration files to update the table in your database.

>>>> python manage.py makemigrations
You are trying to add a non-nullable field 'desc' to dojo without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> old dojo
Invalid input: unexpected EOF while parsing (<string>, line 1)
>>> "old dojo"
Migrations for 'newapp':
  newapp\migrations\0004_dojo_desc.py
    - Add field desc to dojo

//

-----Create a new dojo

dojo.objects.create(name = "coding dojo Los Angeles" ,city = "Los Angeles" , state="California" , desc="new Dojo")
>>> dojo.objects.all()
<QuerySet [<dojo: <User object: Name: coding dojo Los Angeles City: Los Angeles State: California  Description : new Dojo   (7)>

